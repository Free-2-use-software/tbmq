apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

availabilityZones: [ us-east-1a,us-east-1b,us-east-1c ]

metadata:
  name: tbmq
  region: us-east-1
  version: "1.31"

iam:
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true

managedNodeGroups:
  - name: tbmq-node
    instanceType: c7a.large
    desiredCapacity: 2
    maxSize: 2
    minSize: 0
    labels: { role: tbmq }
    privateNetworking: true
    volumeType: gp3
    volumeSize: 20

  - name: tbmq-ie
    instanceType: c7a.medium
    desiredCapacity: 2
    maxSize: 2
    minSize: 0
    labels: { role: tbmq-ie }
    privateNetworking: true
    volumeType: gp3
    volumeSize: 20

  - name: tbmq-kafka
    instanceType: c7a.large
    desiredCapacity: 3
    maxSize: 3
    minSize: 0
    labels: { role: kafka }
    privateNetworking: true
    volumeType: gp3
    volumeSize: 20

  - name: tbmq-redis
    instanceType: c7a.medium
    desiredCapacity: 6
    maxSize: 6
    minSize: 0
    labels: { role: redis }
    privateNetworking: true
    volumeType: gp3
    volumeSize: 20

  # Optional group. You can safely remove this section if:
  #   - Youâ€™re using Amazon RDS or an existing PostgreSQL service.
  #   - You want to keep your database outside the EKS cluster.
  - name: tbmq-postgresql
    instanceType: c7a.large
    desiredCapacity: 1
    maxSize: 1
    minSize: 0
    labels: { role: postgresql }
    volumeType: gp3
    volumeSize: 20

addons:
  - name: aws-ebs-csi-driver
    wellKnownPolicies:
      ebsCSIController: true
  - name: aws-efs-csi-driver
    wellKnownPolicies:
      efsCSIController: true
  - name: vpc-cni
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    resolveConflicts: overwrite
  - name: coredns
    version: latest
    configurationValues: "{\"replicaCount\":3}"
    resolveConflicts: overwrite
  - name: kube-proxy
    version: latest
    resolveConflicts: overwrite
